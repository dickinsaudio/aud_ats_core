//
// AUDIO TEMPORAL STRETCHER CODE LICENSE
//
// PERMISION NOTICE
//
// Copyright © 2022 Audinate Pty Ltd ACN 120 828 006 (Audinate). All rights reserved. 
//
//
// 1.   Subject to the terms and conditions of this Licence, Audinate hereby grants you a worldwide, non-exclusive, 
//      no-charge, royalty free licence to copy, modify, merge, publish, redistribute, sublicense, and/or sell the 
//      Software, provided always that the following conditions are met: 
//      1.1.    the Software must accompany, or be incorporated in a licensed Audinate product, solution or offering 
//              or be used in a product, solution or offering which requires the use of another licensed Audinate 
//              product, solution or offering. The Software is not for use as a standalone product without any 
//              reference to Audinate’s products;
//      1.2.    the Software is provided as part of example code and as guidance material only without any warranty 
//              or expectation of performance, compatibility, support, updates or security; and
//      1.3.    the above copyright notice and this License must be included in all copies or substantial portions 
//              of the Software, and all derivative works of the Software, unless the copies or derivative works are 
//              solely in the form of machine-executable object code generated by the source language processor.
//
// 2.   TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
//      XPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
//      PURPOSE AND NONINFRINGEMENT. 
//
// 3.   TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL AUDINATE BE LIABLE ON ANY LEGAL THEORY 
//      (INCLUDING, WITHOUT LIMITATION, IN AN ACTION FOR BREACH OF CONTRACT, NEGLIGENCE OR OTHERWISE) FOR ANY CLAIM, 
//      LOSS, DAMAGES OR OTHER LIABILITY HOWSOEVER INCURRED.  WITHOUT LIMITING THE SCOPE OF THE PREVIOUS SENTENCE THE 
//      EXCLUSION OF LIABILITY SHALL INCLUDE: LOSS OF PRODUCTION OR OPERATION TIME, LOSS, DAMAGE OR CORRUPTION OF 
//      DATA OR RECORDS; OR LOSS OF ANTICIPATED SAVINGS, OPPORTUNITY, REVENUE, PROFIT OR GOODWILL, OR OTHER ECONOMIC 
//      LOSS; OR ANY SPECIAL, INCIDENTAL, INDIRECT, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES, ARISING OUT OF OR 
//      IN CONNECTION WITH THIS AGREEMENT, ACCESS OF THE SOFTWARE OR ANY OTHER DEALINGS WITH THE SOFTWARE, EVEN IF 
//      AUDINATE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH CLAIM, LOSS, DAMAGES OR OTHER LIABILITY.
//
// 4.   APPLICABLE LEGISLATION SUCH AS THE AUSTRALIAN CONSUMER LAW MAY APPLY REPRESENTATIONS, WARRANTIES, OR CONDITIONS, 
//      OR IMPOSES OBLIGATIONS OR LIABILITY ON AUDINATE THAT CANNOT BE EXCLUDED, RESTRICTED OR MODIFIED TO THE FULL 
//      EXTENT SET OUT IN THE EXPRESS TERMS OF THIS CLAUSE ABOVE "CONSUMER GUARANTEES".  TO THE EXTENT THAT SUCH CONSUMER 
//      GUARANTEES CONTINUE TO APPLY, THEN TO THE FULL EXTENT PERMITTED BY THE APPLICABLE LEGISLATION, THE LIABILITY OF 
//      AUDINATE UNDER THE RELEVANT CONSUMER GUARANTEE IS LIMITED (WHERE PERMITTED AT AUDINATE’S OPTION) TO ONE OF 
//      FOLLOWING REMEDIES OR SUBSTANTIALLY EQUIVALENT REMEDIES:
//      4.1.    THE REPLACEMENT OF THE SOFTWARE, THE SUPPLY OF EQUIVALENT SOFTWARE, OR SUPPLYING RELEVANT SERVICES AGAIN;
//      4.2.    THE REPAIR OF THE SOFTWARE;
//      4.3.    THE PAYMENT OF THE COST OF REPLACING THE SOFTWARE, OF ACQUIRING EQUIVALENT SOFTWARE, HAVING THE RELEVANT 
//              SERVICES SUPPLIED AGAIN, OR HAVING THE SOFTWARE REPAIRED.
//
// 5.   This License does not grant any permissions or rights to use the trade marks (whether registered or unregistered), 
//      the trade names, or product names of Audinate. 
//
// 6.   If you choose to redistribute or sell the Software you may elect to offer support, maintenance, warranties, 
//      indemnities or other liability obligations or rights consistent with this License. However, you may only act on 
//      your own behalf and must not bind Audinate. You agree to indemnify and hold harmless Audinate, and its affiliates 
//      form any liability claimed or incurred by reason of your offering or accepting any additional warranty or additional 
//      liability. 
//
// ats_t.h
//

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN ATS STRUCTURE
//
// This can be abstracted and placed in the CPP file, but is exposed here for debugging
//
// For portability this is using 3.29 fractional representation of the step size and fractional bin counters.
// This is probably not that much faster on an x86, though it would be no slower and is structured to use
// integer arithmetic.  3.29 allows the step to increase all the way to 7 without causing over flow, and so
// this allows sample rates adjustment all the way through to 96kHz -> 8kHz.  The 28 bit fraction for the step
// supports sample rate trim to 4 ppb (.0004 ppm).
//

#include "ats.h"
#include <stdint.h>

namespace Audinate { namespace ats {

#define MOD(x)    ((x) & (ATS_BUFFER_SIZE - 1))                                    // Modulo addressing for the ATS buffer - explicit bit mask
#define SUB(a, b) (MOD((a) - (b) + (ATS_BUFFER_SIZE / 4)) - (ATS_BUFFER_SIZE / 4)) // Difference in the buffer that gan go a bit negative

typedef uint32_t ats_4f28u; // This is an unsigned 4.28 representation for the increment of samples
inline ats_4f28u ats_4f28u_frac(ats_4f28u a) { return a & 0x0FFFFFFF; };
inline int       ats_4f28u_int(ats_4f28u a) { return a >> 28; };
inline ats_4f28u ats_float_4f28u(float f) { return (uint32_t)(f * (float)0x10000000); };
inline ats_4f28u ats_double_4f28u(float f) { return (uint32_t)(f * (double)0x10000000); };
inline float     ats_4f28u_float(ats_4f28u f) { return ((float)f) / (float)0x10000000; };
inline ats_4f28u ats_4f28u_one() { return 0x10000000; };
inline int       ats_4f28u_advance(ats_4f28u f, ats_4f28u s, int n)
{
    return (((s >> 16) * n) >> 12) +           // Integer samples of n*s rounded down
           (((s & 0x0000FFFF) * n + f) >> 28); // Rounding error adjust with fraction
}

#define ATS_Offsets ((uint32_t)512)

struct ats_t
{
    Config    config;  // Everything in the config is considered stable after a setup
    uint32_t  configs; // Number of times it has been configured
    uint32_t  in;      // Location in ring of next input sample to be placed - integer
    uint32_t  outN;    // Integer part of next output sample
    ats_4f28u outF;    // Fractional part of next output sample
    ats_4f28u step;    // Sample step - 4.28 fixed point   Ratio of input to output sample rate

    Chrono chrono[Event::EVENTS]; // Set of statistic structures - null is disabled

    int32_t   maxIntDivT; // The (approximate) number of sample periods in 2^32 ns - used to calculate offset invariant
    float     trackInt;   // The accumulated  term for changing rate PPM relative to outrate/inrate
    float     trackProp;  // The proportional term for correcting rate PPM relative to outrate/inrate
    float     trackOff;   // The target rate offset from control PI controller in PPM relative to outrate/inrate
    float     trackSlew;  // The slew rate limited applied offset PPM relative to outrate/inrate
    ats_4f28u trackStep0; // The nominal step of input samples for each output sample for outrate/inrate
    float     trackT;     // The average period in the tracking loop

    uint32_t pushOffsetN, popOffsetN; // Count of the push or pop (mod 2^32) and position index (mod )
    uint32_t pushOffset[ATS_Offsets]; // Atomic invariant being a time offset position in the buffer
    uint32_t popOffset[ATS_Offsets];  // (difference in sample point and scaled wall clock) represented as 0..2^32
        
    AtsData *data; // The working audio buffers
};

uint32_t atsPushOffset(ats_t *p);
uint32_t atsPopOffset(ats_t *p);

}} // namespace Audinate::ats

//
// Copyright © 2022 Audinate Pty Ltd ACN 120 828 006 (Audinate). All rights reserved. 
//
